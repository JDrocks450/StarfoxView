<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>SFXedit 0.93 Documentation.</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body bgcolor="#00CCCC"><div align="center">   <table width="700" border="1" cellpadding="10">    <tr>       <td bgcolor="#0099CC">         <p align="center"><font size="5" face="Arial, Helvetica, sans-serif"><strong>SFXedit           0.93 <em>beta</em></strong> documentation.</font></p>        <p align="center"><font face="Arial, Helvetica, sans-serif">&copy;2005           VL-Tone -- <a href="mailto:ant00@lycos.com">ant00@lycos.com<br>          <br>          </a><a href="http://pages.infinit.net/voxel/">http://pages.infinit.net/voxel/</a><br>          <a href="http://membres.lycos.fr/nes3d/">http://membres.lycos.fr/nes3d/</a><br>          </font></p>        </td>    </tr>    <tr>       <td><font face="Arial, Helvetica, sans-serif">This is a prerelease of an         upcoming Starfox level editor application.<br>        <br>        It contains some bugs and may corrupt your ROM file(s), so only use it         on backups.<br>        <br>        I don&#8217;t provide the ROM file, and don&#8217;t ask me where to find         them.<br>        I hope you are or were once a proud StarFox cartridge owner.<br>        <br>        <strong>It can -only- be used with version 1.0 of the Starfox ROM.</strong><br>        Version 1.0 has a red contour over the title screen logo.<br>        Version 1.2 has a brown contour.<br>        Japanese version has a blue contour.<br>        <br>        I&#8217;ll add support for these other versions some day (including SFX         Competition).<br>        <br>        <strong>New in SFXedit 0.93:</strong> the program will check for the correct         StarFox US 1.0 version.<br>        If the version is not US 1.0, the program will tell you what version you         were trying to open.<br>        Just click the open ROM file button again and chose the correct version.<br>        <br>        Now for an explanation of the level editor basics.<em> Hexadecimal knowledge         is required.</em><br>        <br>        There are 2 banks used for the level in the game at $000005 and $00000D.<br>        Most if not all hex adress used in the editor are in reverse byte order,         and <br>        that may change in the future. <br>        <br>        The real ROM addresses of these can be found by multiplying the high byte         by <br>        32768 and then adding the remaining 16-bit chunk +512<br>        <br>        The editor will edit an extra 32k bank at $000020 provided you extended<br>        the ROM by at least 32k (32768 bytes). The extra empty bank must be filled<br>        with FFs so to extend a SNES ROM, just add at least a 32768 bytes chunk         of FFs.<br>        The editor will auto-detect if the ROM has been extended.<br>        <br>        I&#8217;ll add the possibility too access more extra banks soon.<br>        <br>        In the editor you can<br>        -Select multiple objects using the shift key. <br>        <br>        -Copy them and paste them in empty spaces. <br>        <br>        -Delete objects to free space. <br>        <br>        -Please note that empty spaces (FF) will crash the game if it reads them.<br>        <br>        -That&#8217;s why I suggest you work in the extra bank instead of trying         to modify<br>        the original levels too much.<br>        <br>        -The &#8220;Open ROM&#8221; button is used to open a ROM.<br>        <br>        -The &#8220;Run in SNES9x&#8221; should open the ROM in your Emulator.<br>        <br>        -This run function may or may not work :)<br>        <br>        -The revert file location is only asked if it&#8217;s needed (when you         revert an object)<br>        <br>        -The revert file location is reseted when you open a save/edit ROM.<br>        <br>        -&#8221;Revert Selection&#8221; only works on objects that have the same         type in the revert ROM.<br>        <br>        -Click on a location in the blue list to jump to other levels, default         is Training. <br>        <br>        -You can edit any property of any object that has it&#8217;s value hi-lighted         by <br>        clicking on it. You can even edit the br1, br2, br3 and b4 properties         of h78 <br>        asm objects without having to edit the code. <br>        <br>        -Very important feature: if you click on an editable property name,<br>        many properties will display a pop-up menu, where you can chose pre-defined<br>        values with descriptions, very useful for objnum:, objtyp: , objid: and         bhnum:.<br>        <br>        -If you click on &#8220;warp:&#8221; or &#8220;br1:&#8221; property though.         the editor will jump to the warp <br>        address. Use the Go Back button to get back to where you where. <br>        <br>        -When &#8220;duplicate at:&#8221; is selected, the duplicate button will         duplicate objects <br>        starting at the next empty space found after the address (default is &#8220;000020&#8221;         <br>        the start of the empty extra bank) <br>        <br>        -If the next empty location is too far or there is not enough space there,<br>        the editor will spit out an error.<br>        <br>        -Most levels are initialized in the 0D bank but jump back in the 05 bank,         you <br>        can use this warp object to jump to a new level at the 20 bank for example.         <br>        <br>        -To create new objects, you can choose them by clicking the popup menu         field at <br>        the right of the &#8220;new object&#8221; button, then click the button.         <br>        <br>        -To paste and create objects, you must select an empty byte object that         is <br>        followed by enough empty bytes objects to fit the object length. <br>        <br>        -When you click on the animated icon for an object it will open it in         the 3d <br>        viewer on top. <br>        <br>        -You can rotate objects in the 3d viewer by dragging in the 3d view, holding         <br>        alt will rotate on another axis. <br>        <br>        -You can use the &#8220;.&#8221; and &#8220;,&#8221; keys to step frames         of an object when the <br>        animation is stopped. <br>        <br>        -When you click on the asm property of an h78 chunk, you get a disassembled         <br>        version of the included asm code in the red upper right text field. <br>        <br>        -You can set initial conditions for the register emulation bits, most         h78 chunk<br>        don&#8217;t require a change from the default. (this only affects disassembling)<br>        <br>        -If you click the Hex Data Mode button, you&#8217;ll get an hexdata: property         field <br>        for objects instead of the individual properties. <br>        <br>        -The hexdata: property fields contains raw hex bytes not including the         first <br>        byte which is the &#8220;objtyp:&#8221; byte. <br>        <br>        -You can copy and paste values when they are selected. You can even copy         some <br>        uneditable properties like &#8220;addr:&#8221; to a &#8220;warp:&#8221;         property. <br>        <br>        -Click on &#8220;Normal Mode&#8221; to get the normal view of properties.<br>        <br>        The ztimer value is a decrementing counter that is very important to the         game <br>        engine. Until this counter reach zero, the games moves forward without         drawing <br>        and loading anything new.<br>        <br>        When the value reaches zero, the next object is loaded and displayed if         it&#8217;s a <br>        polygon object. The game will then load and draw any following objects         at a <br>        position relative to the current one, until it reaches a new ztimer setting.         <br>        <br>        The h8A and h12 objects are used to set the ztimer, but most objects with<br>        x y z coords also can set the ztimer.<br>        <br>        It&#8217;s used to make gaps in game, it makes the x y z coord system         always <br>        relative to the last ztimer setting.<br>        </font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif"><strong>The object viewer           is new in version 0.93.<br>          </strong><br>          Click the &quot;object viewer&quot; button to open it.<br>          <br>          -You get access to the same 3d and animation controls as in the level           editor's mini viewer.<br>          <br>          -The list of objects in the blue text fields at the right is referring           to all documented objects.<br>          <br>          -Clicking on the blue text field will open and view the object.<br>          <br>          -Descriptions are preliminary, and some objects are not displayed and           texture support is minimal.<br>          <br>          -The &quot;export to .obj file&quot; button will save a monochrome Wavefront           .OBJ format file <br>          from the current object in view. The .OBJ file is saved in the application's           enclosing folder.<br>          Animated objects will create multiple .OBJ files when exporting.<br>          <br>          -The color palette buttons will switch the palette for the current object,           changes are not saved.<br>          <br>          -At the bottom of the object viewer interface is the 28 bytes header           that exists for every 3d <br>          object in Starfox.It includes information about where to find the polygon           mesh data, scaling,<br>          palette set and other info which I didn't manage to figure out yet (I           suspect those are about <br>          collision regions).<br>          <br>          -You cannot save changes to this header data for now using the editor,           but obviously, <br>          I'm planning to add support for header editing.<br>          <br>          -Note the object viewer is not an object editor (not yet!) so nothing           you change in it will<br>          have any impact on the level editor and your ROM file.<br>          <br>          -To get back to the level editor from in the object viewer, click the           &quot;Level Editor&quot; button.(duh!)<br>          <br>          To be added in a future release is text editing so the you can edit           text found <br>          in the game like dialogs, bosses and level descriptions.<br>          <br>          I'm aiming to implement a WYSIWYG 3d editor that will be much more interactive           than<br>          the current text/menu based editor. <br>          <br>          Still this part of the interface will still be needed to allow a more           complete control of <br>          what can happen in the game like loops, warps, music and other events.<br>          <br>          I'm also planning to add an &quot;easy mode&quot; where people won't           have to deal with hexadecimal.<br>          <br>          Still many of the original levels are complicated by themselves and           even an easy to use <br>          editor won't help with those.<br>          <br>          Until then, you can experiment on your own with the editor, which is           overall useable once<br>          you figure out the basics of it :)</font></p>        </td>    </tr>  </table>  <br>  <p align="center"><strong><font size="5" face="Arial, Helvetica, sans-serif">Here     are descriptions for all chunk types used in the game.</font></strong></p>  </div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h86 len: 14 Object+behavior         with 16 bits coords</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This is one of the common           way to display 3d polygonal objects in the game.16-bits x y and z coordinates           are used (-32768 to +32768)<br>          <br>          <strong>objad:</strong> uses 2 bytes to refer to a polygonal object.<br>          <br>          <strong>bhaddr:</strong> uses 3 bytes to refer directly to a behavior.           <br>          A pop-up menuis also available for this property with all the values           used in the game</font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h00 len: 11 Object+behavior         with 16 bits coords</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This one also uses 16 bits           coordinates.<br>          <br>          Instead of the <strong>objad:</strong> property, <strong>objnum:</strong>           is used to refer to the <br>          polygon object. This restricts you to 256 predefined values.<br>          <br>          The <strong>objad:</strong> property is not editable in this chunk type.<br>          It's being displayed for reference.<br>          <br>          Much the same, <strong>bhnum:</strong> replaces <strong>bhaddr: </strong>in           h00 chunks,<br>          and only <strong>bhnum:</strong> is editable and is restricted to 256           predefined values.</font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h74 len: 10 Object/behavior         with 16 bits coords</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type also uses           16 bits coords .<br>          <br>          It uses only one byte (<strong>bhnum:</strong>) to refer to a polygon           object and a behavior at the same time.<br>          </font><font face="Arial, Helvetica, sans-serif"><br>          Each <strong>bhnum:</strong> value has an associated 1 byte value referring           to a polygon object. </font></p>        <p><font face="Arial, Helvetica, sans-serif">You can see this value in           the non editable <strong>objnum:</strong> text field.</font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h70 len: 7 Object+behavior         with 8 bits coords</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type is like           h00 but with 8 bits coordinates. <br>          <br>          The z coordinate is ranging from 0 to 255 (so they are only positive)           when 8 bits coords are used.<br>          <br>          <strong>objnum:</strong> is used to refer to the polygonal object (one           byte).<br>          <strong>bhnum:</strong> is used to refer to a predefined behavior (one           byte).<br>          <br>          <strong>bhaddr:</strong> and <strong>objid:</strong> are non editable           in h70, their values can be <br>          copied and pasted in other editable <strong>bhaddr:</strong> and <strong>bhnum:</strong>           fields.</font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h76 len: 6 Object/behavior         with 8 bits coords</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type is like           h86 but with 8 bits coordinates. <br>          </font></p></td>    </tr>  </table>  <p><br>    </p><table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h0A len: 16 Random         group behavior with 16 bits coords</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type has 16           bits x, y and z coordinates.<br>          It also contains a 5 bytes <strong>random_group:</strong> property.<br>          The main use of this object is to generate multiple objects<br>          at random or semi random position.</font></p>        <p><font face="Arial, Helvetica, sans-serif">It's used to generate asteroid           fields and other randomized swarms.<br>          <br>          Click on the random group property to get a pop-up menu<br>          with all the known types with descriptions.<br>          <br>          The <strong>objad:</strong> property is a 2 bytes value referring to           polygon objects.<br>          It's not always used by the h0A depending on the swarm type.</font></p></td>    </tr>  </table>  <p><font face="Arial, Helvetica, sans-serif"><strong>All the previously described     polygon objects chunk types include <br>    a <em>ztimer:</em> property, which is defined earlier in the document.</strong></font></p>  <p>&nbsp;</p></div><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h78: len:varies. Pure         ASM code block.</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type will execute           imbeded SNES code and then go back to the game.<br>          <br>          When you click on the asm: property, the code will get disassembled           in the red asm text field. <br>          <br>          You can only observe the listing, not edit it. Note that RTL in a h78           block means &quot;go back to the game&quot; and the command before,<br>          usually LDX is used to determine the jump back address.<br>          <br>          If you really think you can edit the raw code, you can use the Hex Data           mode.<br>          <br>          The editor will try to automatically find those &quot;branches&quot;<br>          and make them editable in the <strong>br1: br2: br3:</strong> and <strong>br4:</strong>           field.<br>          <br>          The<strong> br</strong>x<strong>:</strong> properties will refer to           2 bytes addresses in the <br>          current bank ie: XXXX05, XXXX0D or XXXX20.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h2C len: 6 Warp to         2 bytes address in current bank.</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type is used           to warp to a 2 bytes address in the current bank, but only when a predefined           condition is met. </font></p>        <p><font face="Arial, Helvetica, sans-serif">The <strong>condition:</strong>           property is 3 bytes long and refers to a specific address where the           condition is checked. </font></p>        <p><font face="Arial, Helvetica, sans-serif">You can use the included           pop-up menu to access all the values that are used in the game.</font></p>        <p><font face="Arial, Helvetica, sans-serif">For example it's used in           the Spaceship Armada level to decide if the arwing will enter inside           a ship or pass beside it.<br>          <br>          It's also used to loop bosses level parts until they are destroyed.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h5E len: 6 Screen         transition</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Transitions and other unknown           events. </font></p>        <p><font face="Arial, Helvetica, sans-serif">Use the pop-up menu to get           a list of values used in the game.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h04 len: 5 Loop segment         x times</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Used in the game loop to           any address in the current bank using 2 bytes ie: XXXX05, XXXX0D or           XXXX20. The loop will occur X number of times then the game will continue           with the next object.</font></p>        <p><font face="Arial, Helvetica, sans-serif">Note that when moving/duplicating           parts of levels you have to manually change the destination address           for h04 loops, and other warps like h2E and h28, and h78 brx: warp properties.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h36 len: 4 Rotates         previous polygon object</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Will rotate the last displayed           polygon object according to a one byte rotation mode and 2 bytes angle           or rotation speed value.<br>          <br>          Modes include static rotation to specific angles on each of the 3 axis's.           There are also animated modes were an object rotates by itself on a           given axis at a given speed.<br>          <br>          The pop-up menu for this one needs to be completed.</font><font face="Arial, Helvetica, sans-serif"><br>          </font></p>        </td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h2E len: 4 Warp to         3 bytes address</font></strong></td>    </tr>    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h28 len: 4 Warp to         3 bytes address, add to stack</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">These chunk objects will           warp to anywhere in the ROM<br>          it uses the same 3 bytes format as the addr: field.<br>          <br>          You can even copy and paste those addresses between chunks.<br>          The difference between the two types is that h28 is a special warp <br>          object that remembers where it got launched from. When a h2A object           is reached, the game jumps back to this stored address.<br>          <br>          Jump back addresses are added to a &quot;stack&quot; so that you can           use <br>          multiple h28 warps and get back to the point where you left by using           the same amount of h2A objects. If you use a h2A while being in the           lowest level of the stack, the game will exit the level and return to           the level selection screen.<br>          </font><font face="Arial, Helvetica, sans-serif"><br>          There is a fixed limit to the &quot;recursion&quot; that you can have.<br>          For example, if you use a h28 warp to loop a level endlessly with no<br>          h2A objects inside the loop, the game will freeze after a few dozens           <br>          of loops. So don't do that :)<br>          <br>          h2E warps can be used over and over and anywhere in the game.<br>          They don't use h2A objects so if you want to jump back you have to <br>          do it manually using another h2E object.<br>          <br>          The h28 and h2E objects are the key to create new levels, use themto           jump to empty spaces. <br>          <br>          Most levels start with initialization chunks in bank &quot;0D&quot;           then warp<br>          to the main level data in bank &quot;05&quot; using a h28 object.<br>          <br>          You can have this address point to any part of the game, including new           levels you created in the empty spaces. </font></p>        <p><font face="Arial, Helvetica, sans-serif">Just use a h2A object at           the end of your level data so that the game ends the level normally.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h10 len: 3 Setup Level         BG, Music etc.</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Basic initialization of           the level, changes the background graphics,<br>          the music and other aspects such as the flight mode.</font><font face="Arial, Helvetica, sans-serif"><br>          </font></p></td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h8C len: 3 Behavior         for previous object (16-bits)</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type attaches           to the last showed polygonal objects and<br>          is used to give it a complicated behaviors that are the basis of the           game.<br>          <br>          Those behaviors are not the same as one used inside the polygon object           chunks.<br>          </font><font face="Arial, Helvetica, sans-serif"><br>          These behaviors includes: Flying on many complicated paths, sometimes           shooting different types of lasers aimed at Fox. <br>          <br>          Characters dialog can be triggered. Many &quot;plots&quot; are setup           using h8C chunks. For example one behavior puts an enemy coming from           far away, attacking you. If you don't shoot it, a teammate will fly           by and shoot it for you, blabbering something about it.</font></p>        <p><font face="Arial, Helvetica, sans-serif"> There are different sets           of these and many are character specific <br>          ie: Slippy is taking more time to rescue you, Falco is the fastest and           will brag about it if you don't beat him at it. <br>          <br>          There are also &quot;pairs&quot; of behaviors,one to be applied to an           Arwing polygonal object and the other to an enemy object. They are used           to create scenarios where one is chasing the other.<br>          <br>          All the dialog like &quot;Thank you Fox for saving me bla bla bla&quot;           , &quot;ouch!&quot; or &quot;I was gonna get that one!&quot; happens           automatically.<br>          <br>          There are many sets of these pairs using different paths. Other h86           behaviors includes the flying credits from the end.<br>          <br>          Note that mostly h86 behaviors will use the polygon object on which<br>          it is attached, but sometimes will override it with its own polygon           object.<br>          <br>          This chunk type also features a pop-up menu with descriptions and values           for all the h86 behaviors used in the game.</font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h8A len: 2 Set ztimer         with 8 bit value</strong></font></td>    </tr>    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h12 len: 3 Set ztimer         with 16 bit value</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Sets the ztimer to a 8           bit or 16 bit value.<br>          <br>          The game will move forward without displaying nor loading new chunks           until the ztimer reaches zero.<br>          <br>          Used to make level gaps and time delays in the game.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h64 len: 2 Init camera?</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">It's found only at the           start of level and seems to reset the camera.<br>          Is always followed by h66.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><font face="Arial, Helvetica, sans-serif"><strong>h76 len: 6 Object/behavior         with 8 bits coords</strong></font></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type is like           h86 but with 8 bits coordinates. <br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h14 len: 2 Changes         Music</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">To change the music anywhere           in a level. Value &quot;F0&quot; fades out.<br>          No pop up menu yet.</font><font face="Arial, Helvetica, sans-serif"><br>          </font></p>        </td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h2A len: 1 Jump back         from warp</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">As described in the h28           explanation, will make the game jump back to just after the last h28           was called.<br>          <br>          If used at the &quot;bottom&quot; of the stack, when no h28 have been           used, the game will exit the level and get back to the level selection           screen.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h5A len: 1 Palette         set change?</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">I'm not too sure about           this one but it seems to override the palette set for the previous object.</font></p></td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h02 len: 1 Fades music         out then loops empty level</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Used at the end of some           levels?<br>          </font></p></td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h0E len: 1 Shows current         stage number</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Displays &quot;STAGE: X&quot;<br>          </font></p></td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h44 len: 1 Fades to         black</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Fades the screen to black.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><div align="center">  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h84 len: 1 Palette         set change?</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">Not sure about this one           yet.</font><font face="Arial, Helvetica, sans-serif"><br>          </font></p></td>    </tr>  </table>  <p>&nbsp;</p>  <table width="480" border="1" cellpadding="6">    <tr>       <td><strong><font face="Arial, Helvetica, sans-serif">h4E len: 1 Unknown         use.</font></strong></td>    </tr>    <tr>       <td><p><font face="Arial, Helvetica, sans-serif">This chunk type is one           byte and I don't know its use yet.<br>          </font></p></td>    </tr>  </table></div><p align="center">&nbsp;</p><p align="center">&nbsp;</p><p align="center">&nbsp;</p><p align="center">&nbsp;</p><p align="center">&nbsp;</p></body></html>